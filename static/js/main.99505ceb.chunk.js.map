{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","height","width","alt","CardList","props","cardComponent","robots","map","user","key","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","style","overflowY","border","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filterRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"sSAoBeA,EAlBF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAE3B,OACE,yBAAKC,UAAU,uDACb,yBACEC,IAAG,+BAA0BF,EAA1B,gBACHG,OAAO,QACPC,MAAM,QACNC,IAAI,WAEN,6BACE,4BAAKP,GACL,2BAAIC,MCGGO,EAdE,SAACC,GAAW,IAErBC,EADaD,EAAXE,OACqBC,KAAI,SAACC,GAChC,OACE,kBAAC,EAAD,CAAMC,IAAKD,EAAKX,GAAIA,GAAIW,EAAKX,GAAIF,KAAMa,EAAKb,KAAMC,MAAOY,EAAKZ,WAGlE,OAAO,6BAAMS,ICKAK,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACE,yBAAKd,UAAU,OACb,2BACEe,aAAW,gBACXf,UAAU,mCACVgB,KAAK,SACLC,YAAY,gBACZC,SAAUJ,MCMHK,G,MAdA,SAACb,GACd,OACE,yBACEc,MAAO,CACLC,UAAW,SACXC,OAAQ,kBACRpB,OAAQ,UAGTI,EAAMiB,YCWEC,E,kDAnBb,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IACDmB,MAAQ,CACXC,UAAU,GAHK,E,8DAODC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAG1B,OAAIG,KAAKJ,MAAMC,SACN,wDAEAG,KAAKvB,MAAMiB,a,GAfGQ,aCsBrBC,E,kLAiBFH,KAAKvB,MAAM2B,oB,+BAKJ,MAGoDJ,KAAKvB,MAAxD4B,EAHD,EAGCA,YAAaC,EAHd,EAGcA,eAAgB3B,EAH9B,EAG8BA,OAAQ4B,EAHtC,EAGsCA,UACvCC,EAAe7B,EAAO8B,QAAO,SAAC9B,GAClC,OAAOA,EAAOX,KAAK0C,cAAcC,SAASN,EAAYK,kBAExD,OAAkB,IAAdH,EACK,wBAAIpC,UAAU,MAAd,aAGL,yBAAKA,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWc,aAAcqB,IACzB,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU3B,OAAQ6B,W,GAtCdN,aA8CHU,eA5DS,SAAChB,GACvB,MAAO,CACLS,YAAaT,EAAMiB,aAAaR,YAChC1B,OAAQiB,EAAMkB,cAAcnC,OAC5B4B,UAAWX,EAAMkB,cAAcP,UAC/BT,MAAOF,EAAMkB,cAAchB,UAGJ,SAACiB,GAC1B,MAAO,CACLT,eAAgB,SAACU,GAAD,OAAWD,ECbU,CACvC5B,KCRiC,sBDSjC8B,QDWqDD,EAAME,OAAOC,SAChEf,gBAAiB,kBAAMW,GCTQ,SAACA,GAClCA,EAAS,CAAE5B,KCXyB,2BDYpCiC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAUT,EAAS,CAAE5B,KCbO,yBDauB8B,QAASO,OACjEC,OAAM,SAAC3B,GAAD,OACLiB,EAAS,CAAE5B,KCdoB,wBDcS8B,QAASnB,cDoDxCc,CAA6CT,GG1DtDuB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTZ,MAAK,SAAAiB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5C,QACfuC,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5Bb,OAAM,SAAA3B,GACL8C,QAAQ9C,MAAM,4CAA6CA,M,UCzF3DkD,EAAqB,CACzB3C,YAAa,IAaT4C,EAAqB,CACzB1C,WAAW,EACX5B,OAAQ,GACRmB,MAAO,ICZHoD,EAASC,yBACTC,EAAeC,YAAgB,CAAExC,aDFX,WAA8C,IAA7CjB,EAA4C,uDAApCoD,EAAoBM,EAAgB,uDAAP,GAChE,OAAQA,EAAOnE,MACb,IFb+B,sBEe7B,OAAOoE,OAAOC,OAAO,GAAI5D,EAAO,CAAES,YAAaiD,EAAOrC,UACxD,QACE,OAAOrB,ICJwCkB,cDcxB,WAA8C,IAA7ClB,EAA4C,uDAApCqD,EAAoBK,EAAgB,uDAAP,GACjE,OAAQA,EAAOnE,MACb,IF3BkC,yBE4BhC,OAAOoE,OAAOC,OAAO,GAAI5D,EAAO,CAAEW,WAAW,IAC/C,IF5BkC,yBE6BhC,OAAOgD,OAAOC,OAAO,GAAI5D,EAAO,CAC9BjB,OAAQ2E,EAAOrC,QACfV,WAAW,IAEf,IFhCiC,wBEiC/B,OAAOgD,OAAOC,OAAO,GAAI5D,EAAO,CAC9BE,MAAOwD,EAAOrC,QACdV,WAAW,IAEf,QACE,OAAOX,MC5BP6D,EAAQC,YACZN,EACAO,YAAgBC,IAAiBV,IAEnCW,IAASC,OACP,kBAAC,IAAMC,WAAP,KAME,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,QAGJO,SAASC,eAAe,SFPnB,SAAkB/B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI+B,IAAIC,eAAwBvC,OAAOC,SAASuC,MACpDC,SAAWzC,OAAOC,SAASwC,OAIvC,OAGFzC,OAAO0C,iBAAiB,QAAQ,WAC9B,IAAMrC,EAAK,UAAMkC,eAAN,sBAEPzC,IAgEV,SAAiCO,EAAOC,GAEtCd,MAAMa,EAAO,CACXsC,QAAS,CAAE,iBAAkB,YAE5BlD,MAAK,SAAAC,GAEJ,IAAMkD,EAAclD,EAASiD,QAAQE,IAAI,gBAEnB,MAApBnD,EAASoD,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CxC,UAAUC,cAAcwC,MAAMvD,MAAK,SAAAiB,GACjCA,EAAauC,aAAaxD,MAAK,WAC7BO,OAAOC,SAASiD,eAKpB9C,EAAgBC,EAAOC,MAG1BT,OAAM,WACLmB,QAAQC,IACN,oEAvFAkC,CAAwB9C,EAAOC,GAI/BC,UAAUC,cAAcwC,MAAMvD,MAAK,WACjCuB,QAAQC,IACN,iHAMJb,EAAgBC,EAAOC,OEf/BE,K","file":"static/js/main.99505ceb.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ name, email, id }) => {\n  //const { name, email, id } = props;\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img\n        src={`https://robohash.org/${id}size=200*200`}\n        height=\"200px\"\n        width=\"200px\"\n        alt=\"Robo 1\"\n      />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = (props) => {\n  const { robots } = props;\n  const cardComponent = robots.map((user) => {\n    return (\n      <Card key={user.id} id={user.id} name={user.name} email={user.email} />\n    );\n  });\n  return <div>{cardComponent}</div>;\n  // <div>\n\n  //   <Card id={robots[1].id} name={robots[1].name} email={robots[1].email} />\n  //   <Card id={robots[2].id} name={robots[2].name} email={robots[2].email} />\n  // </div>\n};\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        aria-label=\"Search Robots\"\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"Search\"\n        placeholder=\"Search Robots\"\n        onChange={searchChange}\n      ></input>\n    </div>\n  );\n};\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = (props) => {\n  return (\n    <div\n      style={{\n        overflowY: \"scroll\",\n        border: \"2px solid black\",\n        height: \"800px\",\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n  render() {\n    if (this.state.hasError) {\n      return <h1>OOoops. That is not good</h1>;\n    } else {\n      return this.props.children;\n    }\n  }\n}\n\nexport default ErrorBoundry;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { robots } from \"../robots\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport \"./App.css\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundry from \"../components/ErrorBoundry\";\nimport { setSearchField, requestRobots } from \"../actions\";\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots()),\n  };\n};\nclass App extends Component {\n  // constructor() {\n  //   super();\n  //   // this.state = {\n  //   //   robots: [],\n  //   //   //searchfield: \"\",\n  //    };\n\n  componentDidMount() {\n    //   console.log(this.props.store);\n    //   fetch(\"https://jsonplaceholder.typicode.com/users\")\n    //     .then((response) => response.json())\n    //     .then((users) => {\n    //       this.setState({ robots: users });\n    //     });\n    // }\n\n    this.props.onRequestRobots();\n\n    // onSearchChange = (event) => {\n    //   this.setState({ searchfield: event.target.value });\n  }\n  render() {\n    //const { robots, searchfield } = this.state;\n    //const { robots } = this.state;\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filterRobots = robots.filter((robots) => {\n      return robots.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    if (isPending === true) {\n      return <h1 className=\"tc\">Loading..</h1>;\n    } else {\n      return (\n        <div className=\"tc\">\n          <h1 className=\"f2\">RoboFriends</h1>\n          <SearchBox searchChange={onSearchChange} />\n          <Scroll>\n            <ErrorBoundry>\n              <CardList robots={filterRobots} />\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      );\n    }\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then((response) => response.json())\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch((error) =>\n      dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\n    );\n};\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\nconst initialStateSearch = {\n  searchField: \"\",\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      // return { ...state, searchField: action.payload };\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: \"\",\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false,\n      });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {\n        error: action.payload,\n        isPending: false,\n      });\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Provider, connect } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\nimport { searchRobots, requestRobots } from \"./reducers\";\n\nconst logger = createLogger();\nconst rootReducers = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducers,\n  applyMiddleware(thunkMiddleware, logger)\n);\nReactDOM.render(\n  <React.StrictMode>\n    {/* <div>\n      <Card id={robots[0].id} name={robots[0].name} email={robots[0].email} />\n      <Card id={robots[1].id} name={robots[1].name} email={robots[1].email} />\n      <Card id={robots[2].id} name={robots[2].name} email={robots[2].email} />\n    </div> */}\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}